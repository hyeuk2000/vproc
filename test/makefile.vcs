###################################################################
# Makefile for Virtual Processor SystemVerilog testcode in VCS
#
# This Makefile acts as a wrapper around makefile.common, setting
# up VCS-specific variables and defining VCS execution rules.
###################################################################

#------------------------------------------------------
# User overridable definitions (동일하게 유지)
#------------------------------------------------------
MAX_NUM_VPROC     = 64
USRFLAGS          =
SRCDIR            = ../code
USRCDIR           = usercode
TESTDIR           = .
VOBJDIR           = $(TESTDIR)/obj

# User test source code file list
USER_C            = VUserMain0.c VUserMain1.cpp

#------------------------------------------------------
# VCS Specific Settings (가장 중요한 부분)
#------------------------------------------------------

# 1. VCS_HOME 환경 변수 확인
ifndef VCS_HOME
  $(error VCS_HOME is not set. Please set it to your VCS installation path.)
endif

# 2. 'makefile.common'이 사용할 변수들을 VCS에 맞게 설정
ARCHFLAG          = -m64
OPTFLAG           = -g
HDLLANGUAGE       = 

# *** 핵심 변경점 (1) ***
# SIMULATOR 변수를 정의하여 C 코드 내에서 VCS용 VPI 코드가 활성화되도록 함
# (VSched.c 파일 안에 #ifdef VCS ... #endif 와 같은 코드가 있을 것임)
SIMULATOR         = -DVCS

# VCS VPI 헤더 파일 경로 설정
SIMINCLUDEFLAG    = -I$(VCS_HOME)/include

# VCS 링크 시 필요한 특수 플래그 (필요 시 추가)
SIMFLAGSSO        =

# Get OS type
OSTYPE:=$(shell uname)

# *** 핵심 변경점 (2) ***
# VCS 컴파일 및 시뮬레이션에 사용할 플래그 정의
VCS_TOP           = test
HDL_FILE_LIST     = files.vc

VCSFLAGS          = -full64 -sverilog +v2k \
                    -debug_acc+all \
                    +define+VPROC_BURST_IF \
                    +define+VPROC_BYTE_ENABLE \
                    +incdir+../ \
                    -top $(VCS_TOP) \
                    -l compile.log

SIMVFLAGS         = -l run.log

#------------------------------------------------------
# BUILD RULES
#------------------------------------------------------

# 'makefile.common'을 포함하여 모든 C/C++ 빌드 규칙을 가져옴
# 이 include 한 줄이 C/C++ 컴파일 -> .o 생성 -> .a 아카이브 -> .so 공유 라이브러리 생성을 모두 처리함
include makefile.common

# *** 핵심 변경점 (3) ***
# HDL 컴파일 타겟 정의. C/C++ 공유 라이브러리($(VPROC_PLI))가 먼저 빌드되도록 의존성 설정
.PHONY: compile
compile: $(VPROC_PLI)
	@echo "### Compiling HDL with VCS and loading VPI library..."
	@vcs $(VCSFLAGS) -file $(HDL_FILE_LIST) -load $(VPROC_PLI)

#------------------------------------------------------
# EXECUTION RULES (VCS에 맞게 수정)
#------------------------------------------------------

# all
all: compile

# 대화형 시뮬레이션 (GUI)
sim: compile
	@./simv -gui $(SIMVFLAGS)

# 배치(batch) 모드 시뮬레이션 실행
run: compile
	@./simv $(SIMVFLAGS)

# GUI 모드 시뮬레이션 실행
rungui: compile
	@./simv -gui $(SIMVFLAGS)

gui: rungui

help:
	@$(info make help      Display this message)
	@$(info make           Build C/C++ and HDL code without running simulation)
	@$(info make sim       Build and run interactive GUI simulation)
	@$(info make run       Build and run batch simulation)
	@$(info make rungui/gui Build and run GUI simulation)
	@$(info make clean     Clean previous build artifacts)
	@$(info make clobber   Deep clean all generated files)


#------------------------------------------------------
# CLEANING RULES (VCS 생성 파일들 추가)
#------------------------------------------------------

clean:
	@rm -rf $(VPROC_PLI) $(VLIB) $(VOBJDIR)
	@rm -rf simv simv.daidir csrc ucli.key *.log DVEfiles/
	@rm -rf *.vpd *.vcd *.fsdb *.vcs.* *.ddb *.simv.*

clobber: clean
	@rm -rf novas.*
