###################################################################
# Makefile for VProc Virtual Processor and mem_model testcode
# in Vivado xsim
#
# Copyright (c) 2024 Simon Southwell.
#
# This file is part of VProc.
#
# VProc is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# VProc is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with VProc. If not, see <http://www.gnu.org/licenses/>.
#
###################################################################

# MODEL_TECH environment variable must be set

# User C/C++ overridable flags
PLIVERSION         =
USRFLAGS           =
USER_C             = VUserMain0.c
USRCDIR            = usercode
BUSTYPE            = AVALON

# User simulation overridable flags
USRSIMFLAGS        =

VPROCDIR           = ../..
TESTDIR            = $(CURDIR)
VOBJDIR            = $(TESTDIR)/obj
MEMMODELDIR        = $(CURDIR)/../../../mem_model
MEMMODELREPO       = https://github.com/wyvernSemi/mem_model.git

# VProc C source code
VPROC_C            = VSched.c VUser.c

# Memory model C source code
MEM_C              = mem.c mem_model.c

# Generated  PLI C library
VPROC_PLI          = VProc.so
VLIB               = libvproc.a

# Get OS type
OSTYPE:=$(shell uname)

# Set OS specific variables between Linux and Windows (MSYS2/mingw-w64)
ifeq ($(OSTYPE), Linux)
  CFLAGS_SO        = -shared -lpthread -lrt -rdynamic
  CPPSTD           = -std=c++11
else
  CFLAGS_SO        = -shared -Wl,-export-all-symbols
  CPPSTD           =
endif

CFLAGS             = $(USRFLAGS)                           \
                     -I$(MEMMODELDIR)/src                  \
                     -DINCL_VLOG_MEM_MODEL                 \
                     -DMEM_MODEL_DEFAULT_ENDIAN=1          \
                     $(HDLFLAG)

# Simulation configuration

HDLFLAG          =

ifeq ("$(BUSTYPE)", "AXI")
  FILELIST       = files_axi.prj
  SIM_TOP        = testaxi
  BURSTFLAG      = --define VPROC_BURST_IF --define MEM_EN_TX_BYTEENABLE
  HDLFLAG        = -DAXI
else
  FILELIST       = files_av.prj
  SIM_TOP        = testavm
  BURSTFLAG      =
endif

# Flags for xsim
ANALYSEFLAGS     = -i ../ -i ../.. $(BURSTFLAG) --define VPROC_BYTE_ENABLE --prj $(FILELIST)
ELABFLAGS        = -sv_lib $(VPROC_PLI) --debug typical -timescale 1ps/1ps $(SIM_TOP)
SIMFLAGS         = $(SIM_TOP)

SPACE            =

#------------------------------------------------------
# BUILD RULES
#------------------------------------------------------

all: hdl

$(VPROC_PLI):
	@make --no-print-directory             \
          -C $(VPROCDIR)/test              \
          -f makefile.vivado               \
          USRFLAGS="$(CFLAGS)"             \
          USRCDIR=$(CURDIR)/$(USRCDIR)     \
          USER_C="$(USER_C)"               \
          MEMMODELDIR="$(MEMMODELDIR)/src" \
          MEM_C="$(MEM_C)"                 \
          PLIVERSION=$(PLIVERSION)         \
          TESTDIR=$(TESTDIR)               \
          $(CURDIR)/$(VPROC_PLI)

$(MEMMODELDIR):
	@git clone $(MEMMODELREPO) $(MEMMODELDIR) --recursive

# Let simulator decide what's changed in the HDL
hdl: $(VPROC_PLI)
	@xvlog $(ANALYSEFLAGS)
	@xelab $(ELABFLAGS)

#------------------------------------------------------
# EXECUTION RULES
#------------------------------------------------------

sim: hdl
	@xsim $(SIMFLAGS)

run: hdl
	@xsim -R $(SIMFLAGS)

rungui: hdl
	@xsim -g --autoloadwcfg $(SIMFLAGS)

gui: rungui

help:
	@$(info make help          Display this message)
	@$(info make               Build C/C++ and HDL code without running simulation)
	@$(info make sim           Build and run command line interactive (sim not started))
	@$(info make run           Build and run batch simulation)
	@$(info make rungui/gui    Build and run GUI simulation)
	@$(info make clean         clean previous build artefacts)
	@$(info $(SPACE))
	@$(info Command line options:)
	@$(info $(SPACE)  BUSTYPE=[AVALON|AXI])
	@$(info $(SPACE))

#------------------------------------------------------
# CLEANING RULES
#------------------------------------------------------

clean:
	@rm -rf $(VPROC_PLI) $(VLIB) $(VOBJDIR) xsim* vivado* *.wdb xelab.* xvlog.* .Xil